{"version":3,"sources":["redux/contactsSelector.js","components/Container/Container.styles.js","components/Container/Container.js","redux/contactsActions.js","redux/contactsOperations.js","components/ContactForm/ContactForm.styles.js","components/ContactForm/ContactForm.js","components/Notification/Notification.styles.js","components/Notification/Notification.js","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.js","components/Filter/Filter.styles.js","components/Filter/Filter.js","App.styles.js","App.js","redux/contactsReducer.js","redux/contactsStore.js","index.js"],"names":["getAllContacts","state","contactList","contacts","getFilter","filter","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","toLocaleLowerCase","includes","ContainerStyled","styled","div","Container","children","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","axios","defaults","baseURL","FormStyled","form","LabelStyled","label","InputStyled","input","SubmitButtonStyled","button","connect","dispatch","onSubmit","newContact","post","then","data","catch","error","addContact","useState","setName","number","setNumber","handleInputValues","evt","currentTarget","value","nameInputId","uuidv4","numberInputId","preventDefault","some","target","alert","htmlFor","id","type","placeholder","pattern","onChange","title","required","NotificationStyled","p","Notification","text","ContactListStyled","ul","ContactItemStyled","li","RemoveBtnStyled","onRemoveContact","contactId","delete","useDispatch","useEffect","get","length","map","onClick","Filter","allProps","defaultProps","contactsActions","H1Styled","h1","H2Styled","h2","createReducer","payload","_","combineReducers","rootReducer","contactsReducer","console","log","process","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bae6ee9.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nexport const getAllContacts = state => state.contactList.contacts;\n\nexport const getFilter = state => state.contactList.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizeFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizeFilter),\n    );\n  },\n);\n","import styled from '@emotion/styled';\n\nexport const ContainerStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 15px;\n  margin-bottom: 15px;\n\n  width: 500px;\n  padding: 10px;\n\n  border: 2px solid red;\n  border-radius: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ContainerStyled } from './Container.styles';\n\nexport const Container = ({ children }) => {\n  return <ContainerStyled>{children}</ContainerStyled>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const removeContactRequest = createAction(\n  'contacts/removeContactRequest',\n);\nexport const removeContactSuccess = createAction(\n  'contacts/removeContactSuccess',\n);\nexport const removeContactError = createAction('contacts/removeContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from 'axios';\n\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n} from './contactsActions';\n\naxios.defaults.baseURL = 'http://localhost:5555';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = newContact => dispatch => {\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', newContact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error)));\n};\n\nexport const removeContact = contactId => dispatch => {\n  dispatch(removeContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(removeContactSuccess(contactId)))\n    .catch(error => dispatch(removeContactError(error)));\n};\n","import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  margin-bottom: 20px;\n  padding: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const LabelStyled = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const InputStyled = styled.input`\n  width: 250px;\n  margin-bottom: 15px;\n  padding: 10px;\n  border: 2px solid green;\n  border-radius: 10px;\n`;\n\nexport const SubmitButtonStyled = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 15px;\n\n  font-size: 15px;\n  font-weight: 700;\n\n  background-color: orange;\n  border: 2px solid green;\n  border-radius: 20px;\n\n  cursor: pointer;\n\n  &:hover {\n    color: white;\n    border-color: orange;\n    background-color: green;\n  }\n`;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contactsOperations';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  FormStyled,\n  LabelStyled,\n  InputStyled,\n  SubmitButtonStyled,\n} from './ContactForm.styles';\n\nconst ContactForm = ({ contacts, onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputValues = evt => {\n    const { name, value } = evt.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const submitForm = evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase() === evt.target.name.value.toLowerCase(),\n      )\n    ) {\n      alert(\n        'You have contact with this name, please remove old contact and create new',\n      );\n      return;\n    }\n    onSubmit({ name, number });\n    resetForm();\n  };\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  return (\n    <FormStyled onSubmit={submitForm}>\n      <LabelStyled htmlFor={nameInputId}>Name</LabelStyled>\n      <InputStyled\n        id={nameInputId}\n        type={'text'}\n        name={'name'}\n        placeholder={'Jason Born'}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        value={name}\n        onChange={handleInputValues}\n        title={\n          \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        }\n        required={true}\n      />\n\n      <LabelStyled htmlFor={numberInputId}>Number</LabelStyled>\n      <InputStyled\n        id={numberInputId}\n        type={'tel'}\n        name={'number'}\n        placeholder={'+44-787-123-45-67'}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        value={number}\n        onChange={handleInputValues}\n        title={\n          'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n        }\n        required={true}\n      />\n\n      <SubmitButtonStyled type=\"submit\">Add contact</SubmitButtonStyled>\n    </FormStyled>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contactList.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: newContact => dispatch(addContact(newContact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import styled from '@emotion/styled';\n\nexport const NotificationStyled = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 10px;\n  font-size: 20px;\n  font-weight: 500;\n  color: OrangeRed;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotificationStyled } from './Notification.styles';\n\nexport const Notification = ({ text }) => {\n  return <NotificationStyled>{text}</NotificationStyled>;\n};\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContactListStyled = styled.ul`\n  width: 100%;\n  margin-top: 10px;\n  padding: 15px;\n  font-size: 40px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const ContactItemStyled = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  font-size: 16px;\n  font-weight: 500;\n  color: black;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const RemoveBtnStyled = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 75px;\n  margin-left: auto;\n  padding: 5px;\n\n  font-size: 15px;\n  font-weight: 500;\n\n  background-color: Orange;\n  border: 2px solid orangered;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    color: white;\n    border-color: black;\n    background-color: orangered;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getVisibleContacts } from '../../redux/contactsSelector';\nimport { fetchContacts, removeContact } from '../../redux/contactsOperations';\nimport { connect, useDispatch } from 'react-redux';\nimport { Notification } from '../Notification/Notification';\nimport {\n  ContactListStyled,\n  ContactItemStyled,\n  RemoveBtnStyled,\n} from './ContactList.styles';\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {contacts.length > 0 ? (\n        <ContactListStyled>\n          {contacts.map(({ id, name, number }) => (\n            <ContactItemStyled key={id}>\n              {name} : {number}\n              <RemoveBtnStyled\n                type=\"button\"\n                onClick={() => onRemoveContact(id)}\n              >\n                Remove\n              </RemoveBtnStyled>\n            </ContactItemStyled>\n          ))}\n        </ContactListStyled>\n      ) : (\n        <Notification text={'You don`t have any contacts'} />\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemoveContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import styled from '@emotion/styled';\n\nexport const LabelStyled = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const InputStyled = styled.input`\n  width: 250px;\n  margin-bottom: 15px;\n  padding: 10px;\n  border: 2px solid green;\n  border-radius: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getFilter } from '../../redux/contactsSelector';\nimport * as contactsActions from '../../redux/contactsActions';\nimport { LabelStyled, InputStyled } from './Filter.styles';\n\nconst Filter = ({\n  id,\n  type,\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  title,\n  required,\n  ...allProps\n}) => {\n  return (\n    <>\n      <LabelStyled htmlFor={id}>{label}</LabelStyled>\n      <InputStyled\n        id={id}\n        type={type}\n        name={name}\n        {...allProps}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        title={title}\n        required={required}\n      />\n    </>\n  );\n};\n\nFilter.defaultProps = {\n  type: 'text',\n  placeholder: '',\n  title: '',\n  required: false,\n};\n\nFilter.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: evt => dispatch(contactsActions.changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styled from '@emotion/styled';\n\nexport const H1Styled = styled.h1`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const H2Styled = styled.h2`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-weight: 700;\n  color: black;\n`;\n","import { v4 as uuidv4 } from 'uuid';\nimport { getAllContacts } from './redux/contactsSelector';\nimport { connect } from 'react-redux';\nimport { Container } from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { H1Styled, H2Styled } from './App.styles';\n\nconst App = ({ contacts }) => {\n  return (\n    <Container>\n      <H1Styled>PhoneBook</H1Styled>\n      <H2Styled>Add contact</H2Styled>\n      <ContactForm />\n      <H2Styled>Contacts</H2Styled>\n\n      {contacts.length > 0 && (\n        <Filter\n          id={uuidv4()}\n          label={'Find contacts by name'}\n          placeholder={'Boris Britva'}\n          name={'search'}\n        />\n      )}\n      <ContactList />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: getAllContacts(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  fetchContactsSuccess,\n  addContactSuccess,\n  removeContactSuccess,\n  changeFilter,\n} from './contactsActions';\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [removeContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport contactsReducer from './contactsReducer';\nimport logger from 'redux-logger';\n\nconst rootReducer = combineReducers({ contactList: contactsReducer });\n\nconsole.log(process.env.NODE_ENV);\n\nconst store = configureStore({\n  reducer: rootReducer,\n  // devTools: process.env.NODE_ENV === 'development',\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/contactsStore';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}