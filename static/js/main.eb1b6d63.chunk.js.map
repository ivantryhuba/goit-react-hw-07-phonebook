{"version":3,"sources":["components/Container/Container.styles.js","components/Container/Container.js","redux/contactsActions.js","components/ContactForm/ContactForm.styles.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.js","components/Notification/Notification.styles.js","components/Notification/Notification.js","components/Filter/Filter.styles.js","components/Filter/Filter.js","App.styles.js","App.js","redux/contactsReducer.js","redux/contactsStore.js","index.js"],"names":["ContainerStyled","styled","div","Container","children","addContact","createAction","removeContact","changeFilter","FormStyled","form","LabelStyled","label","InputStyled","input","SubmitButtonStyled","button","connect","state","contacts","contactList","dispatch","onSubmit","newContact","contactsActions","useState","id","setId","name","setName","number","setNumber","handleInputValues","evt","currentTarget","value","uuidv4","nameInputId","numberInputId","preventDefault","console","log","some","contact","toLowerCase","target","alert","htmlFor","type","placeholder","pattern","onChange","title","required","ContactListStyled","ul","ContactItemStyled","li","RemoveBtnStyled","getContacts","allContacts","filter","normalizeFilter","toLocaleLowerCase","includes","onRemoveContact","map","onClick","NotificationStyled","p","Notification","text","Filter","allProps","defaultProps","H1Styled","h1","H2Styled","h2","length","createReducer","actions","payload","_","combineReducers","persistConfig","key","storage","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.eb1b6d63.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContainerStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 15px;\n  margin-bottom: 15px;\n\n  width: 500px;\n  padding: 10px;\n\n  border: 2px solid red;\n  border-radius: 20px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ContainerStyled } from './Container.styles';\n\nexport const Container = ({ children }) => {\n  return <ContainerStyled>{children}</ContainerStyled>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add');\nconst removeContact = createAction('contacts/remove');\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, removeContact, changeFilter };\n","import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  margin-bottom: 20px;\n  padding: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const LabelStyled = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const InputStyled = styled.input`\n  width: 250px;\n  margin-bottom: 15px;\n  padding: 10px;\n  border: 2px solid green;\n  border-radius: 10px;\n`;\n\nexport const SubmitButtonStyled = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 150px;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 15px;\n\n  font-size: 15px;\n  font-weight: 700;\n\n  background-color: orange;\n  border: 2px solid green;\n  border-radius: 20px;\n\n  cursor: pointer;\n\n  &:hover {\n    color: white;\n    border-color: orange;\n    background-color: green;\n  }\n`;\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contactsActions';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  FormStyled,\n  LabelStyled,\n  InputStyled,\n  SubmitButtonStyled,\n} from './ContactForm.styles';\n\nconst ContactForm = ({ contacts, onSubmit }) => {\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputValues = evt => {\n    const { name, value } = evt.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n\n    setId(uuidv4());\n  };\n\n  const resetForm = () => {\n    setId('');\n    setName('');\n    setNumber('');\n  };\n\n  const submitForm = evt => {\n    evt.preventDefault();\n    console.log(evt);\n\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase() === evt.target.name.value.toLowerCase(),\n      )\n    ) {\n      alert(\n        'You have contact with this name, please remove old contact and create new',\n      );\n      return;\n    }\n    onSubmit({ id, name, number });\n    resetForm();\n  };\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  return (\n    <FormStyled onSubmit={submitForm}>\n      <LabelStyled htmlFor={nameInputId}>Name</LabelStyled>\n      <InputStyled\n        id={nameInputId}\n        type={'text'}\n        name={'name'}\n        placeholder={'Jason Born'}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        value={name}\n        onChange={handleInputValues}\n        title={\n          \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        }\n        required={true}\n      />\n\n      <LabelStyled htmlFor={numberInputId}>Number</LabelStyled>\n      <InputStyled\n        id={numberInputId}\n        type={'tel'}\n        name={'number'}\n        placeholder={'+44-787-123-45-67'}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        value={number}\n        onChange={handleInputValues}\n        title={\n          'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n        }\n        required={true}\n      />\n\n      <SubmitButtonStyled type=\"submit\">Add contact</SubmitButtonStyled>\n    </FormStyled>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contactList.contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: newContact => dispatch(contactsActions.addContact(newContact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import styled from '@emotion/styled';\n\nexport const ContactListStyled = styled.ul`\n  width: 100%;\n  margin-top: 10px;\n  padding: 15px;\n  font-size: 40px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const ContactItemStyled = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  font-size: 16px;\n  font-weight: 500;\n  color: black;\n\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const RemoveBtnStyled = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 75px;\n  margin-left: auto;\n  padding: 5px;\n\n  font-size: 15px;\n  font-weight: 500;\n\n  background-color: turquoise;\n  border: 2px solid orangered;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    color: white;\n    border-color: black;\n    background-color: orangered;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport contactsActions from '../../redux/contactsActions';\nimport { connect } from 'react-redux';\nimport {\n  ContactListStyled,\n  ContactItemStyled,\n  RemoveBtnStyled,\n} from './ContactList.styles';\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n  return (\n    <ContactListStyled>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItemStyled key={id}>\n          {name} : {number}\n          <RemoveBtnStyled type=\"button\" onClick={() => onRemoveContact(id)}>\n            Remove\n          </RemoveBtnStyled>\n        </ContactItemStyled>\n      ))}\n    </ContactListStyled>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemoveContact: PropTypes.func.isRequired,\n};\n\nconst getContacts = (allContacts, filter) => {\n  const normalizeFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLocaleLowerCase().includes(normalizeFilter),\n  );\n};\n\nconst mapStateToProps = ({ contactList: { contacts, filter } }) => {\n  return { contacts: getContacts(contacts, filter) };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsActions.removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import styled from '@emotion/styled';\n\nexport const NotificationStyled = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 10px;\n  font-size: 20px;\n  font-weight: 500;\n  color: orange;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NotificationStyled } from './Notification.styles';\n\nexport const Notification = ({ text }) => {\n  return <NotificationStyled>{text}</NotificationStyled>;\n};\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const LabelStyled = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const InputStyled = styled.input`\n  width: 250px;\n  margin-bottom: 15px;\n  padding: 10px;\n  border: 2px solid green;\n  border-radius: 10px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contactsActions';\nimport { LabelStyled, InputStyled } from './Filter.styles';\n\nconst Filter = ({\n  id,\n  type,\n  label,\n  name,\n  placeholder,\n  value,\n  onChange,\n  title,\n  required,\n  ...allProps\n}) => {\n  return (\n    <>\n      <LabelStyled htmlFor={id}>{label}</LabelStyled>\n      <InputStyled\n        id={id}\n        type={type}\n        name={name}\n        {...allProps}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        title={title}\n        required={required}\n      />\n    </>\n  );\n};\n\nFilter.defaultProps = {\n  type: 'text',\n  placeholder: '',\n  title: '',\n  required: false,\n};\n\nFilter.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  title: PropTypes.string,\n  required: PropTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contactList.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: evt => dispatch(contactsActions.changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import styled from '@emotion/styled';\n\nexport const H1Styled = styled.h1`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  font-size: 40px;\n  font-weight: 700;\n  color: black;\n`;\n\nexport const H2Styled = styled.h2`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 30px;\n  font-weight: 700;\n  color: black;\n`;\n","import { connect } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Container } from './components/Container/Container';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport { Notification } from './components/Notification/Notification';\nimport Filter from './components/Filter/Filter';\nimport { H1Styled, H2Styled } from './App.styles';\n\nconst App = ({ contacts }) => {\n  return (\n    <Container>\n      <H1Styled>PhoneBook</H1Styled>\n      <H2Styled>Add contact</H2Styled>\n      <ContactForm />\n\n      <H2Styled>Contacts</H2Styled>\n\n      {contacts.length > 0 ? (\n        <>\n          <Filter\n            id={uuidv4()}\n            label={'Find contacts by name'}\n            placeholder={'Boris Britva'}\n            name={'search'}\n          />\n          <ContactList />\n        </>\n      ) : (\n        <Notification text={'You don`t have any contacts'} />\n      )}\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contactList.contacts,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contactsActions';\n\nconst contacts = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.removeContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ contacts, filter });\n","import {\n  configureStore,\n  combineReducers,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contactsReducer';\nimport logger from 'redux-logger';\n\nconst persistConfig = {\n  key: 'contactList',\n  storage,\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst rootReducer = combineReducers({ contactList: contactsReducer });\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/contactsStore';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}